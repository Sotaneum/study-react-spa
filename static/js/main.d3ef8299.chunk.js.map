{"version":3,"sources":["Home.js","About.js","WithRouterSample.js","Profile.js","Profiles.js","HistorySample.js","App.js","serviceWorker.js","index.js"],"names":["Home","About","location","showDetail","qs","parse","search","ignoreQueryPrefix","detail","withRouter","match","history","value","JSON","stringify","rows","readOnly","onClick","push","data","velopert","name","description","gildong","Profile","username","params","profile","Profiles","activeStyle","background","color","to","path","exact","render","component","HistorySample","useEffect","unblock","block","goBack","App","pathname","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAWeA,EATF,WACX,OACE,6BACE,sCACA,+I,iBCWSC,EAdD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAITC,EAA8B,SAHtBC,IAAGC,MAAMH,EAASI,OAAQ,CACtCC,mBAAmB,IAEIC,OACzB,OACE,6BACE,4CACA,sNACCL,GAAc,qGCGNM,eAZU,SAAC,GAAkC,IAAhCP,EAA+B,EAA/BA,SAAUQ,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC3C,OACE,6BACE,wCACA,8BAAUC,MAAOC,KAAKC,UAAUZ,EAAU,KAAM,GAAIa,KAAM,EAAGC,UAAQ,IACrE,qCACA,8BAAUJ,MAAOC,KAAKC,UAAUJ,EAAO,KAAM,GAAIK,KAAM,EAAGC,UAAQ,IAClE,4BAAQC,QAAS,kBAAMN,EAAQO,KAAK,OAApC,0BCPAC,EAAO,CACXC,SAAU,CACRC,KAAM,qBACNC,YAAa,wEAEfC,QAAS,CACPF,KAAM,qBACNC,YAAa,gFAqBFE,EAjBC,SAAC,GAAe,IACtBC,EADqB,EAAZf,MACUgB,OAAnBD,SACFE,EAAUR,EAAKM,GACrB,OAAKE,EAIH,6BACE,4BACGF,EADH,IACcE,EAAQN,KADtB,KAGA,2BAAIM,EAAQL,aACZ,kBAAC,EAAD,OARK,6GCkBIM,EAhCE,WACf,IAAMC,EAAc,CAClBC,WAAY,QACZC,MAAO,SAGT,OACE,6BACE,gEACA,4BACE,4BACE,kBAAC,IAAD,CAASF,YAAaA,EAAaG,GAAG,sBAAtC,aAIF,4BACE,kBAAC,IAAD,CAASH,YAAaA,EAAaG,GAAG,qBAAtC,aAMJ,kBAAC,IAAD,CACEC,KAAK,YACLC,OAAK,EACLC,OAAQ,kBAAM,mGAEhB,kBAAC,IAAD,CAAOF,KAAK,sBAAsBG,UAAWZ,MCHpCa,MA1Bf,YAAqC,IAAZ1B,EAAW,EAAXA,QAkBvB,OAVA2B,qBAAU,WACR,IAAMC,EAAU5B,EAAQ6B,MAAM,uDAE9B,OAAO,WACDD,GACFA,OAGH,CAAC5B,IAGF,6BACE,4BAAQM,QAnBS,WACnBN,EAAQ8B,WAkBN,gBACA,4BAAQxB,QAjBS,WACnBN,EAAQO,KAAK,OAgBX,wBC4BSwB,MA5Cf,WACE,OACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMV,GAAG,KAAT,WAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,iBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,uBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,YAAT,0BAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIG,UAAWpC,EAAMkC,OAAO,IACxC,kBAAC,IAAD,CAAOD,KAAM,CAAC,SAAU,SAAUG,UAAWnC,IAC7C,kBAAC,IAAD,CAAOgC,KAAK,YAAYG,UAAWR,IACnC,kBAAC,IAAD,CAAOK,KAAK,WAAWG,UAAWC,IAClC,kBAAC,IAAD,CACEF,OAAQ,gBAAGjC,EAAH,EAAGA,SAAH,OACN,6BACE,kHACA,2BAAIA,EAASyC,iBCrBPC,QACW,cAA7BC,OAAO3C,SAAS4C,UAEe,UAA7BD,OAAO3C,SAAS4C,UAEhBD,OAAO3C,SAAS4C,SAASpC,MACvB,2DCXNqC,IAASZ,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFa,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3ef8299.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Home = () => {\n  return (\n    <div>\n      <h1>홈</h1>\n      <p>홈, 그 페이지는 가장 먼저 보여지는 페이지.</p>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport qs from \"qs\";\n\nconst About = ({ location }) => {\n  const query = qs.parse(location.search, {\n    ignoreQueryPrefix: true,\n  });\n  const showDetail = query.detail === \"true\";\n  return (\n    <div>\n      <h1>소개</h1>\n      <p>이 프로젝트는 리액트 라우터 기초를 실습해 보는 예제 프로젝트입니다.</p>\n      {showDetail && <p>detail 값을 true로 설정하셨군요!</p>}\n    </div>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst WithRouterSample = ({ location, match, history }) => {\n  return (\n    <div>\n      <h4>location</h4>\n      <textarea value={JSON.stringify(location, null, 2)} rows={7} readOnly />\n      <h4>match</h4>\n      <textarea value={JSON.stringify(match, null, 2)} rows={7} readOnly />\n      <button onClick={() => history.push(\"/\")}>홈으로</button>\n    </div>\n  );\n};\n\nexport default withRouter(WithRouterSample);\n","import React from \"react\";\nimport WithRouterSample from \"./WithRouterSample\";\n\nconst data = {\n  velopert: {\n    name: \"김민준\",\n    description: \"리액드를 좋아하는 개발자\",\n  },\n  gildong: {\n    name: \"홍길동\",\n    description: \"고전 소설 홍길동전의 주인공\",\n  },\n};\n\nconst Profile = ({ match }) => {\n  const { username } = match.params;\n  const profile = data[username];\n  if (!profile) {\n    return <div>존재하지 않는 사용자입니다.</div>;\n  }\n  return (\n    <div>\n      <h3>\n        {username}({profile.name})\n      </h3>\n      <p>{profile.description}</p>\n      <WithRouterSample />\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport { Route, NavLink } from \"react-router-dom\";\nimport Profile from \"./Profile\";\n\nconst Profiles = () => {\n  const activeStyle = {\n    background: \"black\",\n    color: \"white\",\n  };\n\n  return (\n    <div>\n      <h3>사용자 목록:</h3>\n      <ul>\n        <li>\n          <NavLink activeStyle={activeStyle} to=\"/profiles/velopert\">\n            velopert\n          </NavLink>\n        </li>\n        <li>\n          <NavLink activeStyle={activeStyle} to=\"/profiles/gildong\">\n            gildong\n          </NavLink>\n        </li>\n      </ul>\n\n      <Route\n        path=\"/profiles\"\n        exact\n        render={() => <div>사용자를 선택해 주세요.</div>}\n      />\n      <Route path=\"/profiles/:username\" component={Profile} />\n    </div>\n  );\n};\n\nexport default Profiles;\n","import React, { useEffect } from \"react\";\n\nfunction HistorySample({ history }) {\n  const handleGoBack = () => {\n    history.goBack();\n  };\n  const handleGoHome = () => {\n    history.push(\"/\");\n  };\n\n  useEffect(() => {\n    const unblock = history.block(\"정말 떠나실 건가요?\");\n\n    return () => {\n      if (unblock) {\n        unblock();\n      }\n    };\n  }, [history]);\n\n  return (\n    <div>\n      <button onClick={handleGoBack}>뒤로</button>\n      <button onClick={handleGoHome}>홈으로</button>\n    </div>\n  );\n}\n\nexport default HistorySample;\n","import React from \"react\";\nimport { Link, Route, Switch } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport About from \"./About\";\nimport Profiles from \"./Profiles\";\nimport HistorySample from \"./HistorySample\";\n\nfunction App() {\n  return (\n    <div>\n      <ul>\n        <li>\n          <Link to=\"/\">홈</Link>\n        </li>\n        <li>\n          <Link to=\"/about\">소개</Link>\n        </li>\n        <li>\n          <Link to=\"/profiles\">프로필</Link>\n        </li>\n        <li>\n          <Link to=\"/history\">History 예제</Link>\n        </li>\n      </ul>\n      <Switch>\n        <Route path=\"/\" component={Home} exact={true} />\n        <Route path={[\"/about\", \"/info\"]} component={About} />\n        <Route path=\"/profiles\" component={Profiles} />\n        <Route path=\"/history\" component={HistorySample} />\n        <Route\n          render={({ location }) => (\n            <div>\n              <h2>이 페이지는 존재하지 않습니다.</h2>\n              <p>{location.pathname}</p>\n            </div>\n          )}\n        />\n      </Switch>\n    </div>\n  );\n}\n\n/*\nv5 이전\n<Route path=\"/about\" component={About} />\n<Route path=\"/info\" component={About} />\n\nv5 이후\n<Route path={[\"/about\", \"/info\"]} component={About} />\n */\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}